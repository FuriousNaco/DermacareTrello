"use client"

import { useState } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Badge } from "@/components/ui/badge"
import { Calendar, Users, Clock, Search, Plus, User, Phone, Mail, MapPin } from 'lucide-react'
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"

interface Patient {
  id: string
  name: string
  age: number
  phone: string
  email: string
  address: string
  medicalHistory: string
  lastVisit: string
  nextAppointment?: string
  condition: string
  status: "active" | "inactive"
}

interface Appointment {
  id: string
  patientId: string
  patientName: string
  date: string
  time: string
  type: string
  status: "scheduled" | "completed" | "cancelled"
}

export default function DermatologyApp() {
  const [patients, setPatients] = useState<Patient[]>([
    {
      id: "1",
      name: "María González",
      age: 35,
      phone: "+34 666 123 456",
      email: "maria.gonzalez@email.com",
      address: "Calle Mayor 123, Madrid",
      medicalHistory: "Dermatitis atópica desde la infancia",
      lastVisit: "2024-01-15",
      nextAppointment: "2024-02-15",
      condition: "Dermatitis Atópica",
      status: "active"
    },
    {
      id: "2",
      name: "Carlos Rodríguez",
      age: 42,
      phone: "+34 677 987 654",
      email: "carlos.rodriguez@email.com",
      address: "Avenida de la Paz 45, Barcelona",
      medicalHistory: "Psoriasis diagnosticada en 2020",
      lastVisit: "2024-01-20",
      condition: "Psoriasis",
      status: "active"
    },
    {
      id: "3",
      name: "Ana Martín",
      age: 28,
      phone: "+34 655 444 333",
      email: "ana.martin@email.com",
      address: "Plaza del Sol 8, Valencia",
      medicalHistory: "Acné severo, tratamiento con isotretinoína",
      lastVisit: "2024-01-10",
      nextAppointment: "2024-02-10",
      condition: "Acné",
      status: "active"
    }
  ])

  const [appointments, setAppointments] = useState<Appointment[]>([
    {
      id: "1",
      patientId: "1",
      patientName: "María González",
      date: "2024-02-15",
      time: "10:00",
      type: "Consulta de seguimiento",
      status: "scheduled"
    },
    {
      id: "2",
      patientId: "3",
      patientName: "Ana Martín",
      date: "2024-02-10",
      time: "11:30",
      type: "Control de tratamiento",
      status: "scheduled"
    }
  ])

  const [searchTerm, setSearchTerm] = useState("")
  const [selectedPatient, setSelectedPatient] = useState<Patient | null>(null)
  const [isAddPatientOpen, setIsAddPatientOpen] = useState(false)
  const [isAddAppointmentOpen, setIsAddAppointmentOpen] = useState(false)
  const [newPatient, setNewPatient] = useState<Partial<Patient>>({
    name: "",
    age: 0,
    phone: "",
    email: "",
    address: "",
    medicalHistory: "",
    condition: "",
    status: "active"
  })

  const filteredPatients = patients.filter(patient =>
    patient.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
    patient.condition.toLowerCase().includes(searchTerm.toLowerCase())
  )

  const todayAppointments = appointments.filter(apt => 
    apt.date === new Date().toISOString().split('T')[0] && apt.status === "scheduled"
  )

  const addPatient = () => {
    if (newPatient.name && newPatient.age && newPatient.phone) {
      const patient: Patient = {
        id: Date.now().toString(),
        name: newPatient.name,
        age: newPatient.age,
        phone: newPatient.phone,
        email: newPatient.email || "",
        address: newPatient.address || "",
        medicalHistory: newPatient.medicalHistory || "",
        lastVisit: new Date().toISOString().split('T')[0],
        condition: newPatient.condition || "",
        status: "active"
      }
      setPatients([...patients, patient])
      setNewPatient({
        name: "",
        age: 0,
        phone: "",
        email: "",
        address: "",
        medicalHistory: "",
        condition: "",
        status: "active"
      })
      setIsAddPatientOpen(false)
    }
  }

  return (
    <div className="min-h-screen bg-gray-50 p-6">
      <div className="max-w-7xl mx-auto space-y-6">
        {/* Header */}
        <div className="flex justify-between items-center">
          <div>
            <h1 className="text-3xl font-bold text-gray-900">Sistema de Gestión Dermatológica</h1>
            <p className="text-gray-600">Gestión integral de pacientes y citas</p>
          </div>
          <div className="flex gap-2">
            <Dialog open={isAddPatientOpen} onOpenChange={setIsAddPatientOpen}>
              <DialogTrigger asChild>
                <Button>
                  <Plus className="w-4 h-4 mr-2" />
                  Nuevo Paciente
                </Button>
              </DialogTrigger>
              <DialogContent className="max-w-2xl">
                <DialogHeader>
                  <DialogTitle>Registrar Nuevo Paciente</DialogTitle>
                  <DialogDescription>
                    Complete la información del paciente para crear un nuevo registro.
                  </DialogDescription>
                </DialogHeader>
                <div className="grid grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="name">Nombre Completo *</Label>
                    <Input
                      id="name"
                      value={newPatient.name}
                      onChange={(e) => setNewPatient({...newPatient, name: e.target.value})}
                      placeholder="Nombre y apellidos"
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="age">Edad *</Label>
                    <Input
                      id="age"
                      type="number"
                      value={newPatient.age}
                      onChange={(e) => setNewPatient({...newPatient, age: parseInt(e.target.value)})}
                      placeholder="Edad"
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="phone">Teléfono *</Label>
                    <Input
                      id="phone"
                      value={newPatient.phone}
                      onChange={(e) => setNewPatient({...newPatient, phone: e.target.value})}
                      placeholder="+34 666 123 456"
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="email">Email</Label>
                    <Input
                      id="email"
                      type="email"
                      value={newPatient.email}
                      onChange={(e) => setNewPatient({...newPatient, email: e.target.value})}
                      placeholder="email@ejemplo.com"
                    />
                  </div>
                  <div className="col-span-2 space-y-2">
                    <Label htmlFor="address">Dirección</Label>
                    <Input
                      id="address"
                      value={newPatient.address}
                      onChange={(e) => setNewPatient({...newPatient, address: e.target.value})}
                      placeholder="Dirección completa"
                    />
                  </div>
                  <div className="col-span-2 space-y-2">
                    <Label htmlFor="condition">Condición/Diagnóstico</Label>
                    <Input
                      id="condition"
                      value={newPatient.condition}
                      onChange={(e) => setNewPatient({...newPatient, condition: e.target.value})}
                      placeholder="Ej: Dermatitis atópica, Psoriasis, etc."
                    />
                  </div>
                  <div className="col-span-2 space-y-2">
                    <Label htmlFor="history">Historia Médica</Label>
                    <Textarea
                      id="history"
                      value={newPatient.medicalHistory}
                      onChange={(e) => setNewPatient({...newPatient, medicalHistory: e.target.value})}
                      placeholder="Antecedentes médicos relevantes..."
                      rows={3}
                    />
                  </div>
                </div>
                <div className="flex justify-end gap-2 mt-4">
                  <Button variant="outline" onClick={() => setIsAddPatientOpen(false)}>
                    Cancelar
                  </Button>
                  <Button onClick={addPatient}>
                    Registrar Paciente
                  </Button>
                </div>
              </DialogContent>
            </Dialog>
          </div>
        </div>

        {/* Dashboard Stats */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Total Pacientes</CardTitle>
              <Users className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{patients.length}</div>
              <p className="text-xs text-muted-foreground">
                {patients.filter(p => p.status === "active").length} activos
              </p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Citas Hoy</CardTitle>
              <Calendar className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{todayAppointments.length}</div>
              <p className="text-xs text-muted-foreground">
                Programadas para hoy
              </p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Próximas Citas</CardTitle>
              <Clock className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">
                {appointments.filter(a => a.status === "scheduled").length}
              </div>
              <p className="text-xs text-muted-foreground">
                Pendientes
              </p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Condiciones Más Comunes</CardTitle>
              <User className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">3</div>
              <p className="text-xs text-muted-foreground">
                Tipos diferentes
              </p>
            </CardContent>
          </Card>
        </div>

        {/* Search and Patient List */}
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          <div className="lg:col-span-2">
            <Card>
              <CardHeader>
                <CardTitle>Lista de Pacientes</CardTitle>
                <CardDescription>
                  Gestione y busque entre todos los pacientes registrados
                </CardDescription>
                <div className="relative">
                  <Search className="absolute left-2 top-2.5 h-4 w-4 text-muted-foreground" />
                  <Input
                    placeholder="Buscar por nombre o condición..."
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    className="pl-8"
                  />
                </div>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {filteredPatients.map((patient) => (
                    <div
                      key={patient.id}
                      className="flex items-center justify-between p-4 border rounded-lg hover:bg-gray-50 cursor-pointer"
                      onClick={() => setSelectedPatient(patient)}
                    >
                      <div className="flex items-center space-x-4">
                        <div className="w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center">
                          <User className="w-5 h-5 text-blue-600" />
                        </div>
                        <div>
                          <h3 className="font-medium">{patient.name}</h3>
                          <p className="text-sm text-gray-500">{patient.age} años • {patient.condition}</p>
                        </div>
                      </div>
                      <div className="text-right">
                        <Badge variant={patient.status === "active" ? "default" : "secondary"}>
                          {patient.status === "active" ? "Activo" : "Inactivo"}
                        </Badge>
                        <p className="text-xs text-gray-500 mt-1">
                          Última visita: {new Date(patient.lastVisit).toLocaleDateString('es-ES')}
                        </p>
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Patient Details or Appointments */}
          <div>
            {selectedPatient ? (
              <Card>
                <CardHeader>
                  <CardTitle>Detalles del Paciente</CardTitle>
                  <CardDescription>
                    Información completa de {selectedPatient.name}
                  </CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="space-y-2">
                    <div className="flex items-center gap-2">
                      <User className="w-4 h-4 text-gray-500" />
                      <span className="font-medium">{selectedPatient.name}</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <Phone className="w-4 h-4 text-gray-500" />
                      <span className="text-sm">{selectedPatient.phone}</span>
                    </div>
                    {selectedPatient.email && (
                      <div className="flex items-center gap-2">
                        <Mail className="w-4 h-4 text-gray-500" />
                        <span className="text-sm">{selectedPatient.email}</span>
                      </div>
                    )}
                    {selectedPatient.address && (
                      <div className="flex items-center gap-2">
                        <MapPin className="w-4 h-4 text-gray-500" />
                        <span className="text-sm">{selectedPatient.address}</span>
                      </div>
                    )}
                  </div>
                  
                  <div className="border-t pt-4">
                    <h4 className="font-medium mb-2">Información Médica</h4>
                    <div className="space-y-2">
                      <div>
                        <span className="text-sm font-medium">Condición:</span>
                        <p className="text-sm text-gray-600">{selectedPatient.condition}</p>
                      </div>
                      <div>
                        <span className="text-sm font-medium">Historia Médica:</span>
                        <p className="text-sm text-gray-600">{selectedPatient.medicalHistory}</p>
                      </div>
                      {selectedPatient.nextAppointment && (
                        <div>
                          <span className="text-sm font-medium">Próxima Cita:</span>
                          <p className="text-sm text-gray-600">
                            {new Date(selectedPatient.nextAppointment).toLocaleDateString('es-ES')}
                          </p>
                        </div>
                      )}
                    </div>
                  </div>

                  <div className="flex gap-2 pt-4">
                    <Button size="sm" className="flex-1">
                      Editar
                    </Button>
                    <Button size="sm" variant="outline" className="flex-1">
                      Nueva Cita
                    </Button>
                  </div>
                </CardContent>
              </Card>
            ) : (
              <Card>
                <CardHeader>
                  <CardTitle>Citas de Hoy</CardTitle>
                  <CardDescription>
                    Agenda del día {new Date().toLocaleDateString('es-ES')}
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  {todayAppointments.length > 0 ? (
                    <div className="space-y-3">
                      {todayAppointments.map((appointment) => (
                        <div key={appointment.id} className="flex items-center justify-between p-3 border rounded-lg">
                          <div>
                            <h4 className="font-medium">{appointment.patientName}</h4>
                            <p className="text-sm text-gray-500">{appointment.type}</p>
                          </div>
                          <div className="text-right">
                            <p className="font-medium">{appointment.time}</p>
                            <Badge variant="outline">Programada</Badge>
                          </div>
                        </div>
                      ))}
                    </div>
                  ) : (
                    <p className="text-center text-gray-500 py-8">
                      No hay citas programadas para hoy
                    </p>
                  )}
                </CardContent>
              </Card>
            )}
          </div>
        </div>
      </div>
    </div>
  )
}
